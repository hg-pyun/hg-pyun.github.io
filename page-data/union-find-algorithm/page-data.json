{"componentChunkName":"component---src-templates-blog-post-js","path":"/union-find-algorithm/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Log"}},"markdownRemark":{"id":"48687823-9262-5e22-b30b-91e20dfad255","excerpt":"…","html":"<p>올해는 코로나로 인해 집콕을 장기간 하게 되면서, 알고리즘 문제를 푸는 건전한(?) 취미를 가지게 되었다. 그런데 알고리즘 문제를 풀고나서 정리를 하지 않다보니, 뭔가\n남는게 없는 느낌이 강하게 들었다. 학생때도 공부하고, 회사다니면서 다시 보았던, 하지만 문제 풀 때마다 새롭게 느껴졌던…몇가지 알아두면 유용한 알고리즘을 정리해 보고자\n한다. 그 첫번째로 소개할 알고리즘은 Union-Find 이다. </p>\n<p>그전에 먼저 이해를 돕기위해 Disjoint Set에 대해 알아보도록 하자. Disjoint Set이란 서로 중복되지 않는 부분 집합들로\n나눠진 원소들에 대해, 정보를 저장하고 조작할 수 있도록 고안된 자료구조이다. 예를 들면, S=[1, 2, 3, 4]라는 집합이 있을때 A=[1, 2] 와 B=[3, 4]는 Disjoint Set에 해당한다.\n이 Disjoint Set은 데이터를 다루기 위해 제공하는 몇가지 연산이 존재하는데, 그 중 서로 다른 두개의 집합을 병합하는 연산인 Union, 원소가 어느 집합에 속해있는지 판단하는 연산인 Find가\n있다. 여기서 주로 이용하는 Union과 Find 연산이 핵심이 되기 때문에 Union-Find라 많이 부른다.</p>\n<p>이 알고리즘은 주로 “합집합”을 찾을때 사용하는데, 예를 들면 이렇다.</p>\n<blockquote>\n<p>A랑 B는 친구이고, B랑 C는 친구이다. 그렇다면 A랑 C는 간접 친구라 할 수 있는데, 이렇게 친구끼리 연결되어 있으면 하나의 그룹으로 묶을 수 있다고 정의하자.\n그렇다면 N명의 사람이 존재할 때, 각각에 대하여 친구 정보가 주어진다면 총 몇개의 그룹으로 나눌 수 있을까?</p>\n</blockquote>\n<p>이제 막연하게 어떤 느낌인지는 이해가 될 것이다. 앞서 말했듯이 Union-Find는 집합을 이용하는 알고리즘이다. 그렇다면 어떻게 집합을 표현하는지가 궁금할 텐데,\n이제부터는 이해를 돕기 위해 예제를 보면서 찬찬히 들여다 보도록 하자.</p>\n<p>4개의 노드가 존재하고, 각 노드의 Index를 [0, 1, 2, 3]이라 하자. 이를 표로 나타내면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p>여기서 0번과 1번드 노드, 2번과 3번 노드가 서로 연결되어 있는 그룹이라고 하자.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\">0-1, 2-3</span></code></pre>\n<p>그렇다면 이 그룹을 어떻게 표현할 것인가? 핵심은 부모(Parent)의 표현이다. 각 노드의 고유 표현은 Index, 값은 부모의 Index를 나타낸다.\n이를 표로 나타내면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td>0</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>0번 노드의 부모는 자기 자신, 1번 노드의 부모는 0이므로 0과 1이 하나의 그룹으로 묶여 있다는 것을 나타낸다. 2번과 3번 노드도 마찬가지 이다.\n이를 배열로 표현하면 다음과 같다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk12\">parent</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">]</span></span></code></pre>\n<p>배열을 사용하지만 자세히 보면 구현방식은 트리 구조이다. 자 이제 어떻게 표현하는지 알았으니, 아래 예제를 통해 Union-Find 알고리즘의 동작방식에 대해 알아보도록 하자. 아래와 같이 각 노드들의 정보가 주어졌을 때,\n위에서 언급한 방법을 이용하여 표현할 수 있다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\">0-1, 1-2, 3-4, 5 6</span></code></pre>\n<p>먼저 초기 데이터를 정의한다. 각각의 노드는 누가 어떤 노드와 연관되어 있는지 모르기 때문에, 자기 자신을 부모로 가진다. 이렇게 자기 자신을 부모로 가지게 초기화 하는\n연산을 make-set이라 부른다. 이를 표로 나타내면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>자 이제 0-1이 연결되어 있다는 데이터를 이용하여 Union 함수를 호출한다. union(0, 1)을 해준 결과를 표로 나타내면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td><span style=\"color:red\">0</span></td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>자 이제 다음 데이터인 1-2를 이용하여, union(1, 2) 함수를 호출한다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td>0</td>\n<td><span style=\"color:red\">1</span></td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>라고 생각을 했을 것이다. 하지만 이렇게 나타낼 경우, 1번 노드와 2번 노드가 연결되어 있다는 것은 쉽게 알수 있지만, 0번노드와 2번노드가 서로 연관되어 있다는 것을\n알기가 쉽지 않다. 따라서 이 경우엔 부모의 부모를 찾아가서, 마지막으로 도착하는 노드의 Index를 이용한다. 따라서 표로 나타내면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td>0</td>\n<td><span style=\"color:red\">0</span></td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>이제 마지막으로 3-4 데이터를 이용하여, Union(3, 4)를 해주면 최종적으로 다음과 같은 표가 완성된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Parent[i]</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n<td><span style=\"color:red\">3</span></td>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>이를 배열로 나타내면 다음과 같다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk12\">parent</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\">, </span><span class=\"mtk7\">6</span><span class=\"mtk1\">]</span></span></code></pre>\n<p>자 이제 이 내용을 코드로 작성해보자. 앞서 언급했듯이 union과 Find 연산을 함수로 표현한다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">p</span><span class=\"mtk1\"> = [];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// make-set</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">7</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">]) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">union</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\">, </span><span class=\"mtk12\">y</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">y</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">y</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">y</span><span class=\"mtk1\">) </span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">y</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">y</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">union</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">union</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">union</span><span class=\"mtk1\">(</span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// [0, 0, 0, 3, 3, 5, 6]</span></span></code></pre>\n<p>이게 가장 기본적인 Union-Find의 동작 방식이다. 그런데 자세히 보면 문제점이 몇가지 있다. 다음과 같이 자료 선형적일 경우, Find 연산이 루트 함수를 찾아가는데\nO(N)의 시간복잡도를 가지게 된다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\">1</span>\n<span class=\"vscode-highlight-line\"> \\</span>\n<span class=\"vscode-highlight-line\">  2</span>\n<span class=\"vscode-highlight-line\">   \\</span>\n<span class=\"vscode-highlight-line\">    3</span>\n<span class=\"vscode-highlight-line\">     \\ </span>\n<span class=\"vscode-highlight-line\">      4</span></code></pre>\n<p>그렇다면 이 현상을 개선할 순 없을까? Find 함수를 약간 수정해서 최적화 할 수 있다. 루트노드를 찾을 때 마다, 해당하는 노드의 루트를 갱신하는 방법이다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">]) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">[</span><span class=\"mtk12\">x</span><span class=\"mtk1\">]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이밖에도 트리의 깊이가 깊어지지 않도록, 높이가 낮은 트리를 높이가 더 높은 트리 밑에 넣는 Union-By-Rank라는 최적화 기법도 있다.</p>\n<p>이제 Union-Find 알고리즘에 대해 알아보았으니, 관련된 문제를 풀어가며 익혀 보도록 하자. 위 내용을 충분히 이해했다면 해결하는게 어렵지 않을 것이다.</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/friend-circles/\">LeetCode 547. Friend Circles</a></li>\n<li><a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">LeetCode 990. Satisfiability of Equality Equations</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">LeetCode 1319. Number of Operations to Make Network Connected</a></li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Union-Find Algorithm","date":"December 05, 2020","description":"서로 다른 두 집합을 병합하는 방법. Union-Find에 대해 알아보자."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/union-find-algorithm/","previous":{"fields":{"slug":"/data-structure-for-javascript/"},"frontmatter":{"title":"Data Structure For JavaScript"}},"next":{"fields":{"slug":"/react-fast-refresh/"},"frontmatter":{"title":"React Fast Refresh"}}}}}