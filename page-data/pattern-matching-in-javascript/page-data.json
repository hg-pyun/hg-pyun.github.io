{"componentChunkName":"component---src-templates-blog-post-js","path":"/pattern-matching-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Log"}},"markdownRemark":{"id":"a800d086-ef6c-56a5-807c-9e9eb42227a9","excerpt":"pattern-matching TC-39 Github에 패턴 매칭(Parttern-Matching)이 Stage 0에서 1로 한단계 등급이 상향됬었다. Stage1은 proposal 단계로 앞으로 TC-3…","html":"<p><img src=\"./title.png\" alt=\"pattern-matching\"></p>\n<p>TC-39 Github에 <strong>패턴 매칭(Parttern-Matching)</strong>이 Stage 0에서 1로 한단계 등급이 상향됬었다. Stage1은 proposal 단계로 앞으로 TC-39 위원회에서 논의할 예정이며, 구체적인 데모에 대한 코드도 포함되어야 한다. 아직 Stage2(draft)와 Stage3(candidate), 그리고 stage4(finished)를 거쳐 정식으로 스펙에 추가되려면 갈 길이 멀지만 어떤 기능을 가지고 있고 또 어떻게 사용할 수 있는지 간단하게나마 미리 알아보도록 하자.</p>\n<p>패턴 매칭은 Scala, F#, Rust 등 다른 언어에도 있는 기능인데, 앞서 언급한 언어에 대해서는 잘 모르지만, 비교적 단순하므로 다른 언어를 통해 알아보도록 하자.</p>\n<h4>Scala</h4>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">object MatchTest1 extends App {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  def </span><span class=\"mtk11\">matchTest</span><span class=\"mtk1\">(x: Int): String = x match {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    case </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk8\">&quot;one&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    case </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk8\">&quot;two&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    case _ =&gt; </span><span class=\"mtk8\">&quot;many&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">matchTest</span><span class=\"mtk1\">(</span><span class=\"mtk7\">3</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>case명령문을 포함하고 있는 블록은 정수를 문자열로 매핑하는 함수를 정의한다.match라는 키워드를 사용해서 x의 값이 1이 들어올 경우 \"one\", 2가 들어올 경우 \"two\", 그 외 값이들어올 경우는 \"many\"를 반환한다.</p>\n<h4>Rust</h4>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"rust\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">match</span><span class=\"mtk1\"> x {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;one&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;two&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;three&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    _ =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;anything&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Rust도 크게 차이는 없다. 물론 | operator라던가 struct도 패턴 매칭이 가능하다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"rust\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> x = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">match</span><span class=\"mtk1\"> x {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> | </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;one or two&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;three&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    _ =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;anything&quot;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"rust\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Point</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    x: </span><span class=\"mtk4\">i32</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    y: </span><span class=\"mtk4\">i32</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> origin = Point { x: </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, y: </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">match</span><span class=\"mtk1\"> origin {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Point { x, y } =&gt; </span><span class=\"mtk11\">println!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;({},{})&quot;</span><span class=\"mtk1\">, x, y),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>여기까지만 본다믄 Switch-Case와 비슷하게 보이는데, 패턴 매칭은 그 쓰임새가 더 용이하다. 아래는 TC-39에서 제안된 패턴매칭의 예제이다. case, when 그리고 if를 사용해서 직관적으로 컨디션 처리를 할 수 있다. 또 적절하게 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">구조 분해 할당(Destructuring)</a>을 사용한 것을 볼 수 있다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk12\">jsonService</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">case</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">res</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {status: </span><span class=\"mtk7\">200</span><span class=\"mtk1\">, headers: {</span><span class=\"mtk8\">&#39;Content-Length&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">s</span><span class=\"mtk1\">}} -&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#96;size is </span><span class=\"mtk4\">${</span><span class=\"mtk12\">s</span><span class=\"mtk4\">}</span><span class=\"mtk8\">&#96;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {status: </span><span class=\"mtk7\">404</span><span class=\"mtk1\">} -&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;JSON not found&#39;</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">status</span><span class=\"mtk1\">} </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">status</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">400</span><span class=\"mtk1\">) -&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    throw new </span><span class=\"mtk11\">RequestError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">res</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>자바스크립트를 이용하여 서버와 통신할 때, 서버의 응답 값에 따라 어떤 결과처리를 할 때가 종종 있다. 보통 이때 if문이나 Switch-Case를 사용해서 분기처리를 하지만 복잡한 컨디션의 경우 코드가 매우 복잡해진다. 하지만 제안된 패턴매칭 방법을 사용하면 비교적 명료하고 간단하게 처리가 가능하다. 만약 독자가 React를 사용하고 있다면 Redux의 리듀서를 작성하는데도 활용 할 수 있다.</p>\n<h4>Reducer</h4>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">todoApp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">state</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">initialState</span><span class=\"mtk1\">, </span><span class=\"mtk12\">action</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">switch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">type</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SET_VISIBILITY_FILTER</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assign</span><span class=\"mtk1\">({}, </span><span class=\"mtk12\">state</span><span class=\"mtk1\">, {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">visibilityFilter:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">filter</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ADD_TODO</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assign</span><span class=\"mtk1\">({}, </span><span class=\"mtk12\">state</span><span class=\"mtk1\">, {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">todos:</span><span class=\"mtk1\"> [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          ...</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">todos</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">text:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">text</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">completed:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        ]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TOGGLE_TODO</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assign</span><span class=\"mtk1\">({}, </span><span class=\"mtk12\">state</span><span class=\"mtk1\">, {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">todos:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">todos</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">((</span><span class=\"mtk12\">todo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">index</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">index</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assign</span><span class=\"mtk1\">({}, </span><span class=\"mtk12\">todo</span><span class=\"mtk1\">, {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">              </span><span class=\"mtk12\">completed:</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">todo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">completed</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">todo</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">default</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h4>Reducer with pattern matching</h4>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">todoApp</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">state</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">initialState</span><span class=\"mtk1\">, </span><span class=\"mtk12\">action</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">action</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {type: </span><span class=\"mtk8\">&#39;set-visibility-filter&#39;</span><span class=\"mtk1\">, filter: </span><span class=\"mtk12\">visFilter</span><span class=\"mtk1\">} -&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      ({...</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">visFilter</span><span class=\"mtk1\">}),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {type: </span><span class=\"mtk8\">&#39;add-todo&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">text</span><span class=\"mtk1\">} -&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      ({...</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">todos:</span><span class=\"mtk1\"> [...</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">todos</span><span class=\"mtk1\">, {</span><span class=\"mtk12\">text</span><span class=\"mtk1\">}]}),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {type: </span><span class=\"mtk8\">&#39;toggle-todo&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">} -&gt; (</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        ...</span><span class=\"mtk12\">state</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">todos:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">todos</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">((</span><span class=\"mtk12\">todo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">idx</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idx</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">index</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          ? {...</span><span class=\"mtk12\">todo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">done:</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">todo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">done</span><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          : </span><span class=\"mtk12\">todo</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        )</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    )</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk12\">state</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// ignore unknown actions</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>또 자바스크랩트 내에서만 한정하지 않고, JSX안에도 다음과 같이 활용할 수 있다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Fetch</span><span class=\"mtk1\"> </span><span class=\"mtk12\">url</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">API_URL</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span><span class=\"mtk4\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">props</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">case</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">props</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    when {</span><span class=\"mtk12\">loading</span><span class=\"mtk1\">} -&gt; </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Loading</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">error</span><span class=\"mtk1\">} -&gt; </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Error</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">error</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">data</span><span class=\"mtk1\">} -&gt; </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Page</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">data</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">Fetch</span><span class=\"mtk17\">&gt;</span></span></code></pre>\n<p>마지막으로 함수 덕 타이핑(duck-typing)에도 활용이 가능하니, 익숙해진다면 다양한 곳에 활용할 수 있을 듯 하다.</p>\n<pre class=\"dark-default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vector</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">case</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">vector</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  when { </span><span class=\"mtk12\">x</span><span class=\"mtk1\">, </span><span class=\"mtk12\">y</span><span class=\"mtk1\">, </span><span class=\"mtk12\">z</span><span class=\"mtk1\"> } -&gt; </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">y</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">z</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">x</span><span class=\"mtk1\">, </span><span class=\"mtk12\">y</span><span class=\"mtk1\"> } -&gt; </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">y</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> [...</span><span class=\"mtk12\">etc</span><span class=\"mtk1\">] -&gt; </span><span class=\"mtk12\">vector</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">getLength</span><span class=\"mtk1\">({</span><span class=\"mtk12\">x:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">y:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">z:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">3</span><span class=\"mtk1\">}) </span><span class=\"mtk3\">// 3.74165</span></span></code></pre>\n<h2>마치며</h2>\n<p>물론, 현재는 Stage1 단계라 추후 API 명세가 크게 바뀔 가능성도 있다(Stage0에서는 없었던 when이 생겼던 것처럼). 현재 바벨에도 추가하려는 움직임이 보이고 있으니 생각보다 우리가 빠르게 접하게 될 것이라 생각한다(<a href=\"https://github.com/babel/babel/pull/9010\">#9010</a>), (<a href=\"https://github.com/babel/babel/pull/9318\">#9318</a>). 개인적으로 <a href=\"https://dev-momo.tistory.com/entry/Javascript-Optional-Chaining\">Optional Chaining</a>과 더불어 어서 추가됬으면 좋겠다는 생각이 든다. 참고로 패턴 매칭을 개념을 이용한 유틸 함수들은 이미 많이 만들어져 활용되고 있으므로, 시간이 된다면 직접 만들어서 활용해 보면 좋을 것 같다.</p>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Pattern Matching in JavaScript","date":"September 30, 2019","description":"TC-39 Github에 패턴 매칭(Parttern-Matching)이 Stage 0에서 1로 한단계 등급이 상향됬었다. Stage1은 proposal 단계로 앞으로 TC-39 위원회에서 논의할 예정이며, 구체적인 데모에 대한 코드도 포함되어야 한다. 아직 Stage2(draft)와 Stage3(candidate), 그리고 stage4(finished)를 거쳐 정식으로 스펙에 추가되려면 갈 길이 멀지만 어떤 기능을 가지고 있고 또 어떻게 사용할 수 있는지 간단하게나마 미리 알아보도록 하자."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/pattern-matching-in-javascript/","previous":{"fields":{"slug":"/how-to-implement-async-await/"},"frontmatter":{"title":"Async-await는 어떻게 구현하는가"}},"next":null}}}